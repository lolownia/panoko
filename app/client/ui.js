// Generated by CoffeeScript 1.4.0
(function() {
  var PaneController, QueryInput, SidebarController, Test,
    __slice = [].slice;

  PaneController = React.createFactory(React.createClass({
    mixins: [Panoko.SyncState],
    globals: ['pane', 'query'],
    getInitialState: function() {
      return {
        query: '',
        pane: 'messages'
      };
    },
    newQuery: function(query) {
      return this.setState({
        query: query
      });
    },
    show: function(pane) {
      return this.setState({
        pane: pane
      });
    },
    panes: [['messages', Panoko.FacebookMessageView], ['search', Panoko.SearchQueryView], ['cred', Panoko.CredView]],
    render: function() {
      var children, comp, components, pane, _i, _j, _len, _len1, _ref, _ref1;
      children = [];
      _ref = this.panes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], pane = _ref1[0], components = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
        for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
          comp = components[_j];
          children.push(comp({
            key: pane,
            query: this.state.query,
            shown: pane === this.state.pane,
            sidebar: this.props.sidebar,
            pane: pane
          }));
        }
      }
      return DOM.div(children);
    }
  }));

  SidebarController = React.createFactory(React.createClass({
    mixins: [Panoko.SyncState],
    globals: ['pane', 'counts'],
    mergers: {
      counts: function(old, change) {
        return _.extend(old || {}, change);
      }
    },
    panes: ['messages', 'search', 'cred'],
    getInitialState: function() {
      return {
        pane: 'messages',
        counts: {}
      };
    },
    changePane: function(pane) {
      return this.publish('pane', pane);
    },
    render: function() {
      var _this = this;
      return DOM.ul({
        id: 'active',
        "class": "nav navbar-nav side-nav"
      }, this.panes.map(function(pane) {
        return DOM.li({
          key: pane,
          className: _this.state.pane === pane && 'selected' || ''
        }, DOM.a({
          href: '#' + pane,
          onClick: function(ev) {
            return _this.changePane(pane);
          }
        }, [
          DOM.span({
            key: 'name'
          }, pane), DOM.span({
            key: 'count',
            className: 'badge',
            style: !_this.state.counts[pane] && {
              display: 'none'
            } || {}
          }, [_this.state.counts[pane]])
        ]));
      }));
    }
  }));

  QueryInput = React.createFactory(React.createClass({
    mixins: [Panoko.SyncState],
    submit: function(ev) {
      var query;
      ev.preventDefault();
      query = this.refs.input.getDOMNode().value;
      console.log("calling searcher with " + query);
      return this.publish('query', query);
    },
    render: function() {
      return DOM.form({
        "class": 'navbar-search',
        onSubmit: this.submit
      }, DOM.input({
        type: 'text',
        placeholder: 'Search',
        "class": 'form-control',
        ref: 'input'
      }, []));
    }
  }));

  Test = React.createFactory(React.createClass({
    getInitialState: function() {
      return {
        foo: {}
      };
    },
    render: function() {
      var _this = this;
      return DOM.div({}, [
        DOM.button({
          onClick: function() {
            return _this.setState({
              foo: {
                one: 1
              }
            });
          }
        }, "one"), DOM.button({
          onClick: function() {
            return _this.setState({
              foo: {
                two: 2
              }
            });
          }
        }, "two"), DOM.span("state keys are: " + (Object.keys(this.state.foo)))
      ]);
    }
  }));

  Meteor.startup(function() {
    React.render(PaneController(), document.getElementById('panes'));
    React.render(QueryInput(), document.getElementById('search-form'));
    return React.render(SidebarController(), document.getElementById('sidebar'));
  });

}).call(this);
