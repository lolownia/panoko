// Generated by CoffeeScript 1.4.0
(function() {
  var ELEM, FacebookMessageView, PaneController, QueryInput, SidebarController,
    __slice = [].slice;

  ELEM = React.createElement;

  FacebookMessageView = React.createFactory(React.createClass({
    mixins: [QueryMixin, SyncState],
    getInitialState: function() {
      return {
        facts: []
      };
    },
    getQuery: function(query) {
      var num, or_stmt, qrx;
      num = parseInt(query);
      qrx = RegExp(query);
      or_stmt = [];
      if (num !== NaN) {
        or_stmt = or_stmt.concat([
          {
            frm: num
          }, {
            to: num
          }
        ]);
      }
      or_stmt = or_stmt.concat([
        {
          content: qrx
        }, {
          frm_name: qrx
        }, {
          to_name: qrx
        }
      ]);
      return {
        $and: [
          {
            kind: 'message',
            $or: or_stmt
          }
        ]
      };
    },
    na: function(s) {
      if (s === void 0) {
        return 'N/A';
      }
      if (s === []) {
        return '(empty)';
      }
      return s;
    },
    render: function() {
      var _this = this;
      if (!this.props.shown) {
        return DOM.div();
      }
      return DOM.div({
        "class": 'facebook-messages-pane'
      }, DOM.table({
        "class": 'table'
      }, [
        DOM.thead(DOM.tr([
          _.map(['from', 'to', 'content'], function(fn) {
            return DOM.th({
              key: fn
            }, fn);
          })
        ])), DOM.tbody(this.state.facts.map(function(fact) {
          return DOM.tr({
            key: fact._id
          }, [
            DOM.td({
              key: 'from'
            }, "" + (_this.na(fact.frm)) + " " + (_this.na(fact.frm_name))), DOM.td({
              key: 'to'
            }, "" + (_this.na(fact.to)) + ", " + (_this.na(fact.to_name))), DOM.td({
              key: 'content'
            }, "" + fact.content)
          ]);
        }))
      ]));
    }
  }));

  PaneController = React.createFactory(React.createClass({
    mixins: [SyncState],
    globals: ['pane', 'query'],
    getInitialState: function() {
      return {
        query: '',
        pane: 'messages'
      };
    },
    newQuery: function(query) {
      return this.setState({
        query: query
      });
    },
    show: function(pane) {
      return this.setState({
        pane: pane
      });
    },
    panes: [['messages', FacebookMessageView]],
    render: function() {
      var children, comp, components, pane, _i, _j, _len, _len1, _ref, _ref1;
      children = [];
      _ref = this.panes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        _ref1 = _ref[_i], pane = _ref1[0], components = 2 <= _ref1.length ? __slice.call(_ref1, 1) : [];
        for (_j = 0, _len1 = components.length; _j < _len1; _j++) {
          comp = components[_j];
          children.push(comp({
            query: this.state.query,
            shown: pane === this.state.pane,
            sidebar: this.props.sidebar,
            pane: pane
          }));
        }
      }
      return DOM.div(children);
    }
  }));

  SidebarController = React.createFactory(React.createClass({
    mixins: [SyncState],
    globals: ['pane', 'counts'],
    getInitialState: function() {
      return {
        pane: 'messages',
        counts: {}
      };
    },
    changePane: function(pane) {
      return this.publish('pane', pane);
    },
    render: function() {
      var panes,
        _this = this;
      panes = ['messages'];
      return DOM.ul({
        id: 'active',
        "class": "nav navbar-nav side-nav"
      }, panes.map(function(pane) {
        return DOM.li({
          "class": _this.state.pane === pane && 'selected' || ''
        }, [
          DOM.a({
            href: '#' + pane,
            onClick: function(ev) {
              return _this.changePane(pane);
            }
          }, [
            pane, DOM.span({
              "class": 'badge',
              style: !(_this.state.counts[pane] != null) && {
                display: 'none'
              } || {}
            }, [_this.state.counts[pane]])
          ])
        ]);
      }));
    }
  }));

  QueryInput = React.createFactory(React.createClass({
    mixins: [SyncState],
    submit: function(ev) {
      var query;
      ev.preventDefault();
      query = this.refs.input.getDOMNode().value;
      console.log("calling searcher with " + query);
      return this.publish('query', query);
    },
    render: function() {
      return DOM.form({
        "class": 'navbar-search',
        onSubmit: this.submit
      }, [
        DOM.input({
          type: 'text',
          placeholder: 'Search',
          "class": 'form-control',
          ref: 'input'
        }, [])
      ]);
    }
  }));

  Meteor.startup(function() {
    React.render(PaneController(), document.getElementById('panes'));
    React.render(QueryInput(), document.getElementById('search-form'));
    return React.render(SidebarController(), document.getElementById('sidebar'));
  });

}).call(this);
